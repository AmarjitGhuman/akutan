// Copyright 2019 eBay Inc.
// Primary authors: Simon Fell, Diego Ongaro,
//                  Raymond Kroeker, and Sathish Kandasamy.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package rpc;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

// This file contains definitions for the services that the views expose for use
// by the API tier and other views.
//
// The file src/github.com/ebay/akutan/api/readme.go contains details of how the types
// in related packages are used, and why they exist.

service ReadFactsSP {
	// lookupS returns zero or more LookupChunk results that match the given
	// subjects. Each resulting fact has only its ID, predicate, object, and log
	// index filled in (its subject will be blank). Facts are returned in increasing
	// order of (request offset, predicate, object).
	rpc lookupS(LookupSRequest) returns (stream LookupChunk);
	// lookupSP returns zero or more LookupChunk results that match the given
	// subject-predicates. Each resulting fact has only its ID, object, and log
	// index filled in (its subject and predicate will be blank). Facts are returned
	// in increasing order of (request offset, object).
	rpc lookupSP(LookupSPRequest) returns (stream LookupChunk);
	// lookupSPO returns zero or more LookupChunk results that match the given
	// subject-predicate-objects. Each resulting fact has only its ID and log index
	// filled in (its subject, predicate, and object will be blank). Facts are
	// returned in increasing order of request offset. At most one fact has a given
	// subject, predicate, and object at a given index, so at most one fact is
	// returned per request offset.
	rpc lookupSPO(LookupSPORequest) returns (stream LookupChunk);

	// factStats returns the most recently calculated statistics about the facts
	// stored on this view.
	rpc factStats(FactStatsRequest) returns (FactStatsResult);
}

service ReadFactsPO {
	// lookupPO returns zero or more LookupChunk results that match the given
	// predicate-objects. Each resulting fact has only its ID, subject, and log
	// index filled in (its predicate and object will be blank). Facts are returned
	// in increasing order of (request offset, subject).
	rpc lookupPO(LookupPORequest) returns (stream  LookupChunk);
	// lookupPOCmp returns zero or more LookupChunk results that match the given
	// predicate and the given object criteria. Each resulting fact has only its ID,
	// subject, object, and log index filled in (its predicate will be blank). Facts
	// are returned in increasing order of (request offset, object, subject).
	rpc lookupPOCmp(LookupPOCmpRequest) returns (stream LookupChunk);

	// factStats returns the most recently calculated statistics about the facts
	// stored on this view.
	rpc factStats(FactStatsRequest) returns (FactStatsResult);
}

// Config indicates if a view supports the carousel service for now.
// We could add a view introspection service that each view must
// implement that exposed which other services its supports.
service Carousel {
	rpc logStatus(LogStatusRequest) returns (LogStatusResult);
	rpc ride(CarouselRequest) returns (stream CarouselResult);
}

service Diagnostics {
	rpc stats(StatsRequest) returns (StatsResult);
	rpc profile(ProfileRequest) returns (ProfileResult);
	rpc setLogLevel(LogLevelRequest) returns (LogLevelResult);
	rpc updateStats(UpdateStatsRequest) returns (UpdateStatsResult);
}

message Fact {
	option (gogoproto.stringer)=false;
	uint64 index 	 = 1;
	uint64 id 		 = 2;
	uint64 subject 	 = 3;
	uint64 predicate = 4;
	bytes object     = 5 [(gogoproto.nullable)=false, (gogoproto.customtype) = "KGObject"];
}

// A LookupSRequest requests facts matching the given subjects.
message LookupSRequest {
	// The log index at which to execute the request. Never 0.
	uint64 index = 1;
	// The subjects to search for.
	repeated uint64 subjects = 2;
}

// A LookupSRequest requests facts matching the given subject-predicates.
message LookupSPRequest {
	// The log index at which to execute the request. Never 0.
	uint64 index = 1;
	message Item {
		uint64 subject = 3;
		uint64 predicate = 4;
	}
	// List of subject-predicates to search for.
	repeated Item lookups = 5 [(gogoproto.nullable)=false];
}

// A LookupSRequest requests facts matching the given
// subject-predicate-objects.
message LookupSPORequest {
	// The log index at which to execute the request. Never 0.
	uint64 index = 1;
	message Item {
		uint64 subject = 1;
		uint64 predicate = 2;
		bytes object = 3 [(gogoproto.nullable)=false,(gogoproto.customtype) = "KGObject"];
	}
	// List of subject-predicate-objects to search for.
	repeated Item lookups = 2 [(gogoproto.nullable)=false];
}

// A LookupPORequest requests facts matching the given predicate-objects.
message LookupPORequest {
	// The log index at which to execute the request. Never 0.
	uint64 index = 1;
	message Item {
		uint64 predicate = 2;
		bytes object = 3 [(gogoproto.nullable)=false,(gogoproto.customtype) = "KGObject"];
	}
	// List of predicate-objects to search for.
	repeated Item lookups = 2 [(gogoproto.nullable)=false];
}

// A LookupPOCmpRequest requests facts matching a predicate and criteria about
// the object.
message LookupPOCmpRequest {
	// The log index at which to execute the request. Never 0.
	uint64 index = 1;
	message Item {
		// The predicate is always given and must match exactly.
		uint64 predicate = 2;
		// A comparison operator. For example, if this is OpLess, the
		// fact's object must be less than the given 'object' below.
		Operator operator = 3;
		// This is always given.
		bytes object = 4 [(gogoproto.nullable)=false, (gogoproto.customtype) = "KGObject"];
		// The Range operators use this for the end of the range. For
		// example, if the operator is OpRangeIncExc, the fact's object
		// must be >= the given 'object' and < the given 'end_object'.
		// This field is ignored for non-range operators.
		bytes end_object = 5 [(gogoproto.nullable)=false, (gogoproto.customtype) = "KGObject"];
	}
	// List of search criteria.
	repeated Item lookups = 2 [(gogoproto.nullable)=false];
}

// The set of comparison operators supported by `LookupPOCmpRequest`.
enum Operator {
	option (gogoproto.enum_stringer)=false;
	OpEqual = 0;            // =
	OpLess  = 1;            // <
	OpLessOrEqual = 2;      // <=
	OpGreater = 3;          // >
	OpGreaterOrEqual = 4;   // >=
	OpRangeIncExc = 5;      // Range inclusive-exclusive
	OpRangeIncInc = 6;      // Range inclusive-inclusive
	OpRangeExcInc = 8;      // Range exclusive-inclusive
	OpRangeExcExc = 9;      // Range exclusive-exclusive
	OpPrefix      = 7;      // Has this prefix, strings only
	// OpIn designates membership in a set literal. It is used internally in the
	// API server's query processor and is never used in RPCs. In the future, we
	// plan to move the query processor away from using this rpc.Operator enum,
	// then remove this variant.
	OpIn = 10;
	// OpNotEqual indicates a not-equal (include lang & units where appropriate)
	// comparison. It is used internally in the API server's query processor and
	// is never used in RPCs. In the future, we plan to move the query processor
	// away from using this rpc.Operator enum, then remove this variant.
	OpNotEqual = 11; // !=
}

message LookupChunk_Fact {
	// The array index of the lookup parameters in the request.
	uint32 lookup = 1;
	// A fact matching the parameters identified by 'lookup' in the
	// request. Note that some requests may fill in only some
	// fields of each fact.
	Fact fact = 2 [(gogoproto.nullable)=false];
}

// LookupChunk is a part of a response for a lookup request.
message LookupChunk {
	// Each Fact contains a matching fact and maps it back to lookup
	// parameters in the request. When aggregated across LookupChunks, the
	// set of facts will be complete and will not contain duplicates. Note
	// that some RPCs may provide ordering guarantees for the facts.
	repeated LookupChunk_Fact facts = 1 [(gogoproto.nullable)=false];
}

message UpdateStatsRequest {
}

message UpdateStatsResult {
}


enum LogLevel {
	LOG_PANIC = 0;
	LOG_FATAL = 1;
	LOG_ERROR = 2;
	LOG_WARN  = 3;
	LOG_INFO  = 4;
	LOG_DEBUG = 5;
}

message LogLevelRequest {
	LogLevel newLevel = 1;
}

message LogLevelResult {
}

message StatsRequest {
}

message StatsResult {
	uint64 lastIndex	 = 1;
	int64  facts		 = 2;
	int64  factVersions  = 3;
	string partition 	 = 14;
	uint32 txs			 = 6;
	string viewType      = 7;
	reserved 8;
	google.protobuf.Duration upTime = 9 [(gogoproto.stdduration)=true, (gogoproto.nullable)=false]; 
	string hostname      = 10;
	bytes lastCarouselKey = 11;
	uint32 carouselRiders = 12;
	reserved 13;
	CarouselHashPartitionRequest hashPartition = 15 [(gogoproto.nullable)=false];
}

message ProfileRequest {
	google.protobuf.Duration duration = 1 [(gogoproto.stdduration)=true, (gogoproto.nullable)=false];
	string	 				 filename = 2;
}

message ProfileResult {
}

message LogStatusRequest {
}

enum FactKeyEncoding {
	KeyEncodingUnknown = 0;
	KeyEncodingSPO = 1;
	KeyEncodingPOS = 2;
}

// LogPosition describes a position in the log.
message LogPosition {
	option (gogoproto.stringer)=false;
	// The log index for this position.
	uint64 index = 1;
	// The log version that should be used (or was used) to decode the entry at this index.
	int32 version = 2; 
}

message LogStatusResult {
	// obsolete: uint64 lastApplied = 1;
	reserved 1;
	// NextPosition indicates the next position in the log that this view will 
	// process. i.e. it has applied log entries up to and including nextPos.Index-1
	LogPosition nextPosition = 6 [(gogoproto.nullable)=false];
	// ReplayPosition returns the earliest position that might have a pending
	// transaction. If there are no pending transactions, this position is just
	// past the end of the log. A typical view should boot by riding a carousel
	// up to and excluding this position, then begin replaying the log at this
	// position.
	LogPosition replayPosition = 2 [(gogoproto.nullable)=false];
	// The organization of keys on the view.
	FactKeyEncoding keyEncoding = 3;
	// The maximum log version supported by this server.
	int32 maxVersionSupported = 5;
}

message CarouselHashPartitionRequest {
	// Inclusive
	uint64 start = 1;
	// Exclusive. Use 0 for Infinity.
	uint64 end = 2;
	// Describes how the hash values are derived from the fact.
	FactKeyEncoding encoding = 3;
}

message CarouselRequest {
	// minIndex to maxIndex describes an inclusive-inclusive range of indexes to include in the output.
	uint64 maxIndex = 1;	
	uint64 minIndex = 2;
	bool dedicated = 3;
	// Required because we need encoding.
	CarouselHashPartitionRequest hashPartition = 4 [(gogoproto.nullable)=false];
}

message CarouselResult {
	repeated Fact facts = 1 [(gogoproto.nullable)=false];
}

message PredicateStats {
	uint64 predicate = 1;
	uint64 count 	 = 2;
}

message PredicateObjectStats {
	uint64 predicate = 1;
	bytes object = 2 [(gogoproto.nullable)=false, (gogoproto.customtype) = "KGObject"];
	uint64 count     = 3;
}

message SubjectStats {
	uint64 subject = 1;
	uint64 count   = 2;
}

message SubjectPredicateStats {
	uint64 subject   = 1;
	uint64 predicate = 2;
	uint64 count     = 3;
}

message FactStatsRequest {
}

message FactStatsResult {
	repeated PredicateStats predicates 				 = 1 [(gogoproto.nullable)=false];
	repeated PredicateObjectStats predicateObjects   = 2 [(gogoproto.nullable)=false];
	repeated SubjectStats subjects 					 = 3 [(gogoproto.nullable)=false];
	repeated SubjectPredicateStats subjectPredicates = 4 [(gogoproto.nullable)=false];
	uint64 NumFacts = 5;
	uint64 DistinctPredicates = 6;
	uint64 DistinctPredicateObjects = 7;
	uint64 DistinctSubjects = 8;
	uint64 DistinctSubjectPredicates = 9;
}
